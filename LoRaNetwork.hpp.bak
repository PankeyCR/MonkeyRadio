
#ifndef CONFIGURATION_LoRaNetwork_hpp
#define CONFIGURATION_LoRaNetwork_hpp

	#include "ame_Enviroment.hpp"

	#if defined(DISABLE_LoRaNetwork)
		#define LoRaNetwork_hpp

		#define IMPLEMENTATION_LoRaNetwork
		#define IMPLEMENTING_LoRaNetwork
	#else
		#if defined(DISABLE_IMPLEMENTATION_LoRaNetwork)
			#define IMPLEMENTATION_LoRaNetwork
			#define IMPLEMENTING_LoRaNetwork
		#endif
	#endif
#endif

#ifndef LoRaNetwork_hpp
#define LoRaNetwork_hpp
#define LoRaNetwork_AVAILABLE

#ifndef DISABLE_IMPLEMENTATION_LoRaNetwork
	#define IMPLEMENTATION_LoRaNetwork IMPLEMENTATION(public LoRaNetwork)
	#define IMPLEMENTING_LoRaNetwork IMPLEMENTING(public LoRaNetwork)
#endif

#include "RadioNetwork.hpp"
#include "Class.hpp"
#include "Note.hpp"
#include "ByteArray.hpp"
#include "MessageDelivery.hpp"

#ifdef LoRaNetwork_LogApp
	#include "ame_Logger_config.hpp"
	#include "ame_Logger.hpp"
	
	#define LoRaNetworkLog(location,method,type,mns) ame_Log(this,location,"LoRaNetwork",method,type,mns)
	#define const_LoRaNetworkLog(location,method,type,mns) 
	#define StaticLoRaNetworkLog(pointer,location,method,type,mns) ame_Log(pointer,location,"LoRaNetwork",method,type,mns)
#else
	#ifdef LoRaNetwork_LogDebugApp
		#include "ame_Logger_config.hpp"
		#include "ame_Logger.hpp"
		
		#define LoRaNetworkLog(location,method,type,mns) ame_LogDebug(this,location,"LoRaNetwork",method,type)
		#define const_LoRaNetworkLog(location,method,type,mns) 
		#define StaticLoRaNetworkLog(pointer,location,method,type,mns) ame_LogDebug(pointer,location,"LoRaNetwork",method,type)
	#else
		#define LoRaNetworkLog(location,method,type,mns) 
		#define const_LoRaNetworkLog(location,method,type,mns) 
		#define StaticLoRaNetworkLog(pointer,location,method,type,mns) 
	#endif
#endif

namespace ame{

/*
*	Class Configuration:
*	DISABLE_cppObjectClass
*/
class LoRaNetwork IMPLEMENTATION_RadioNetwork {	
    public:
		LoRaNetwork(){}
		virtual ~LoRaNetwork(){}
		    
		virtual void sendRadio(Note a_send){
			
		}
			
		#if defined(cppObject_AVAILABLE) && defined(cppObjectClass_AVAILABLE) && defined(Class_AVAILABLE)
		virtual cppObjectClass* getClass(){
			return Class<LoRaNetwork>::classType;
		}
		
		virtual bool instanceof(cppObjectClass* cls){
			return cls == Class<LoRaNetwork>::getClass()
			#if defined(AppState_AVAILABLE)
			|| AppState::instanceof(cls)
			#endif
			;
		}
		#endif
		
	protected:
};

}

#endif